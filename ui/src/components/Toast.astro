---
// Simple toast container component
---

<style>
  .toast-root { position: fixed; top: 16px; right: 16px; z-index: 6000; display: flex; flex-direction: column; gap: 8px; pointer-events: none; }
  .toast { min-width: 260px; max-width: 380px; color: #fff; border-radius: 10px; box-shadow: 0 12px 34px rgba(0,0,0,0.35); overflow: hidden; transform: translateY(-10px); opacity: 0; transition: transform .25s ease, opacity .25s ease; pointer-events: auto; }
  .toast.show { transform: translateY(0); opacity: 1; }
  .toast .bar { height: 3px; width: 100%; background: rgba(255,255,255,.25); }
  .toast .content { padding: 12px 14px; font-size: 14px; display: flex; gap: 10px; align-items: center; }
  .toast.success { background: linear-gradient(135deg,#16a34a,#22c55e); }
  .toast.error { background: linear-gradient(135deg,#dc2626,#ef4444); }
  .toast.info { background: linear-gradient(135deg,#2563eb,#3b82f6); }
  .toast .close { margin-left: auto; background: rgba(0,0,0,.15); color: #fff; border: none; border-radius: 6px; padding: 2px 6px; cursor: pointer; }
  .toast .progress { height: 3px; background: rgba(255,255,255,.7); transform-origin: left center; transform: scaleX(1); transition: transform linear; }
</style>

<div id="toast-root" class="toast-root"></div>

<script>
  (function(){
    const root = document.getElementById('toast-root');
    function showToast(message, variant='info', duration=3000){
      const node = document.createElement('div');
      node.className = `toast ${variant}`;
      node.innerHTML = `
        <div class="bar"><div class="progress"></div></div>
        <div class="content">
          <span>${message}</span>
          <button class="close">âœ•</button>
        </div>
      `;
      root.appendChild(node);
      const progress = node.querySelector('.progress');
      // Animate in
      requestAnimationFrame(()=> node.classList.add('show'));
      // Progress bar
      if (progress) {
        progress.style.transitionDuration = `${duration}ms`;
        progress.style.transform = 'scaleX(0)';
      }
      // Close
      const close = node.querySelector('.close');
      const remove = ()=>{ node.classList.remove('show'); setTimeout(()=> node.remove(), 250); };
      close && close.addEventListener('click', remove);
      setTimeout(remove, duration + 50);
    }
    window.addEventListener('toast', (ev)=>{
      const { message, variant, duration } = ev.detail || {};
      showToast(String(message||'Hecho'), String(variant||'info'), Number(duration||3000));
    });
    // Expose global helper
    window.__toast = showToast;
  })();
  </script>
